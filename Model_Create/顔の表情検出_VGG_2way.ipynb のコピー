{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"顔の表情検出_VGG_2way.ipynb のコピー","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KAcfeuxP5wAS","executionInfo":{"status":"ok","timestamp":1627127807126,"user_tz":-540,"elapsed":229,"user":{"displayName":"Colub Pytorch","photoUrl":"","userId":"01599659609392255071"}},"outputId":"097a2a4f-1ff5-4b03-8611-1fecbe876f00"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QZ5QJZbR2lin","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627127809065,"user_tz":-540,"elapsed":272,"user":{"displayName":"Colub Pytorch","photoUrl":"","userId":"01599659609392255071"}},"outputId":"b801de1c-75c6-48ec-cd85-2493953394eb"},"source":["%cd /content/drive/MyDrive/Colab Notebooks/geiot"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/content/drive/.shortcut-targets-by-id/1HvjC1Sh_DFmMvqXUWGoYm1lsmbFoWO8K/Colab Notebooks/geiot\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RqZEbs1vD9Q9"},"source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.utils.data as data\n","import torchvision\n","from tqdm import tqdm\n","from torchvision import models,transforms\n","from PIL import Image\n","import cv2\n","import sys\n","import json\n","import matplotlib.pyplot as plt\n","import random\n","from sklearn.model_selection import train_test_split\n","import os\n","import os.path as osp\n","from glob import glob\n","import pandas as pd"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GO2XwquKmSKQ"},"source":["test_data=pd.read_csv(\"TeamB/input/test/test_anno.csv\", index_col=0)\n","train_data=pd.read_csv(\"TeamB/input/train/train_anno.csv\", index_col=0)\n","\n","#test_data[test_data.Label!=5]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qj2qQ5d2YgD9","executionInfo":{"status":"ok","timestamp":1627165848679,"user_tz":-540,"elapsed":38,"user":{"displayName":"PY TORCH","photoUrl":"","userId":"01394943343175077582"}},"outputId":"d2e6e269-3ca7-4001-c668-9ed763b4f393"},"source":["test_data=test_data[test_data.Label!=5].reset_index(drop=True)\n","train_data=train_data[train_data.Label!=5].reset_index(drop=True)\n","#1:ポジティブ、0:ネガティブ\n","print(test_data)\n","dict_map={ 0:0 , 1:0, 2:0 , 3:1 , 6:1 , 4:1}\n","test_data.Label=test_data.Label.map(dict_map)\n","train_data.Label=train_data.Label.map(dict_map)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["                        imagePath  Label\n","0     TeamB/KDEF\\AF03\\AF03NES.JPG      4\n","1    TeamB/KDEF\\BF25\\BF25AFFL.JPG      0\n","2    TeamB/KDEF\\AM16\\AM16ANFL.JPG      1\n","3     TeamB/KDEF\\BF02\\BF02NES.JPG      4\n","4    TeamB/KDEF\\BM18\\BM18NEHR.JPG      4\n","..                            ...    ...\n","853  TeamB/KDEF\\AM04\\AM04NEHL.JPG      4\n","854  TeamB/KDEF\\AM12\\AM12DIFL.JPG      2\n","855   TeamB/KDEF\\BF28\\BF28HAS.JPG      3\n","856  TeamB/KDEF\\BF13\\BF13ANHL.JPG      1\n","857   TeamB/KDEF\\AM18\\AM18DIS.JPG      2\n","\n","[858 rows x 2 columns]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"_DdkZByGaDPo","executionInfo":{"status":"ok","timestamp":1627165848728,"user_tz":-540,"elapsed":47,"user":{"displayName":"PY TORCH","photoUrl":"","userId":"01394943343175077582"}},"outputId":"f9128634-2d15-4d53-fa8f-a20e29b0a147"},"source":["test_data"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                        imagePath  Label\n","0     TeamB/KDEF\\AF03\\AF03NES.JPG      1\n","1    TeamB/KDEF\\BF25\\BF25AFFL.JPG      0\n","2    TeamB/KDEF\\AM16\\AM16ANFL.JPG      0\n","3     TeamB/KDEF\\BF02\\BF02NES.JPG      1\n","4    TeamB/KDEF\\BM18\\BM18NEHR.JPG      1\n","..                            ...    ...\n","853  TeamB/KDEF\\AM04\\AM04NEHL.JPG      1\n","854  TeamB/KDEF\\AM12\\AM12DIFL.JPG      0\n","855   TeamB/KDEF\\BF28\\BF28HAS.JPG      1\n","856  TeamB/KDEF\\BF13\\BF13ANHL.JPG      0\n","857   TeamB/KDEF\\AM18\\AM18DIS.JPG      0\n","\n","[858 rows x 2 columns]"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>imagePath</th>\n","      <th>Label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>TeamB/KDEF\\AF03\\AF03NES.JPG</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>TeamB/KDEF\\BF25\\BF25AFFL.JPG</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>TeamB/KDEF\\AM16\\AM16ANFL.JPG</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>TeamB/KDEF\\BF02\\BF02NES.JPG</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>TeamB/KDEF\\BM18\\BM18NEHR.JPG</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>853</th>\n","      <td>TeamB/KDEF\\AM04\\AM04NEHL.JPG</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>854</th>\n","      <td>TeamB/KDEF\\AM12\\AM12DIFL.JPG</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>855</th>\n","      <td>TeamB/KDEF\\BF28\\BF28HAS.JPG</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>856</th>\n","      <td>TeamB/KDEF\\BF13\\BF13ANHL.JPG</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>857</th>\n","      <td>TeamB/KDEF\\AM18\\AM18DIS.JPG</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>858 rows × 2 columns</p>\n","</div>"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"1aQ7BVRkY6Pi"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ks7WdeQ-Pm3-"},"source":["#DataSetクラスの作成"]},{"cell_type":"code","metadata":{"id":"k8Tte-2zEkZu"},"source":["class MyDataset(data.Dataset):\n","  def __init__(self,dataFrame,transforms):\n","    \"\"\"\n","    初期化\n","    Param\n","    ===================\n","    dataFrame:pd.dataFrame\n","    画像とアノテーションが含まれているdataFrame\n","    transforms:\n","    前処理\n","    \"\"\"\n","    self.dataframe=dataFrame\n","    self.transforms=transforms\n","    \n","  def __len__(self):\n","    return len(self.dataframe)\n","\n","  def __getitem__(self,idx):\n","    while (True):\n","      r_label=self.dataframe.Label[idx]\n","      img=cv2.imread(self.dataframe.imagePath[idx]) #Image.open(self.img_path[idx])\n","      if img.shape[2]==1:\n","        idx=random.randint(0,len(self))\n","      else:\n","        img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n","        break\n","    if self.transforms:\n","      img=self.transforms(img)\n","\n","    return img,r_label"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XMcQW9I1WGvX"},"source":["# DataLoaderの実装"]},{"cell_type":"markdown","metadata":{"id":"5kptrygSWSXT"},"source":["## 前処理"]},{"cell_type":"code","metadata":{"id":"1sfdd2hsWKHI"},"source":["#TODO:Resizeのサイズ変更\n","traintransform=transforms.Compose([transforms.ToPILImage(),\n","                                   transforms.Resize((224,224)),\n","                                   transforms.ColorJitter(brightness=0.5, contrast=0.5, saturation=0.1),\n","                                   transforms.RandomPerspective(distortion_scale=0.2, p=0.3,interpolation=transforms.InterpolationMode.NEAREST),\n","                                   transforms.RandomAffine(degrees=[-10, 10], translate=(0.1, 0.1), scale=(0.5, 1),interpolation=transforms.InterpolationMode.NEAREST),\n","                                   transforms.ToTensor(),\n","                                   transforms.Normalize([0.485, 0.456, 0.406],\n","                                                            [0.229, 0.224, 0.225])]\n","                                   )\n","testtransform=transforms.Compose([transforms.ToPILImage(),\n","                                  transforms.Resize((224,224)),transforms.ToTensor(),\n","                                  transforms.Normalize([0.485, 0.456, 0.406],\n","                                                            [0.229, 0.224, 0.225])])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cIm53297diR8"},"source":["train_dataset=MyDataset(train_data,transforms=traintransform)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_-3mNLCpdnip"},"source":["test_dataset=MyDataset(test_data,transforms=testtransform)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vWZej7Y4K011"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"knRGABEKfZ4W"},"source":["## DataLoaderの作成"]},{"cell_type":"code","metadata":{"id":"b4LLWpuyfNNX"},"source":["train_dataLoader=data.DataLoader(train_dataset,batch_size=10,shuffle=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":459},"id":"S1B9Qi7Ffcmc","executionInfo":{"status":"ok","timestamp":1627165849150,"user_tz":-540,"elapsed":308,"user":{"displayName":"PY TORCH","photoUrl":"","userId":"01394943343175077582"}},"outputId":"18f8208b-59ff-477f-a73d-e2beca9646b1"},"source":["for datas,label in train_dataLoader:\n","  plt.imshow(datas[0].view(-1,224,224).detach().numpy().transpose(1, 2, 0))\n","  break"],"execution_count":null,"outputs":[{"output_type":"stream","text":["E:\\Anaconda\\envs\\AIProj\\lib\\site-packages\\torchvision\\transforms\\functional.py:594: UserWarning: torch.lstsq is deprecated in favor of torch.linalg.lstsq and will be removed in a future PyTorch release.\n","torch.linalg.lstsq has reversed arguments and does not return the QR decomposition in the returned tuple (although it returns other information about the problem).\n","To get the qr decomposition consider using torch.linalg.qr.\n","The returned solution in torch.lstsq stored the residuals of the solution in the last m - n columns of the returned value whenever m > n. In torch.linalg.lstsq, the residuals in the field 'residuals' of the returned named tuple.\n","The unpacking of the solution, as in\n","X, _ = torch.lstsq(B, A).solution[:A.size(1)]\n","should be replaced with\n","X = torch.linalg.lstsq(A, B).solution (Triggered internally at  ..\\aten\\src\\ATen\\LegacyTHFunctionsCPU.cpp:389.)\n","  res = torch.lstsq(b_matrix, a_matrix)[0]\n","Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"y5ehQvtof-3K"},"source":["test_dataLoader=data.DataLoader(test_dataset,batch_size=10,shuffle=False)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-_5upLc5ibq2"},"source":["# model ダウンロード"]},{"cell_type":"code","metadata":{"id":"3CeEy6ixDX0V","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627165851209,"user_tz":-540,"elapsed":2032,"user":{"displayName":"PY TORCH","photoUrl":"","userId":"01394943343175077582"}},"outputId":"479f0552-b5fb-4eca-ab15-7d1c4e254eed"},"source":["#学習済みモデルVGG16をロード\n","\n","#VGG-16モデルのインスタンスを生成\n","use_pretrained=True\n","net=models.vgg16_bn(pretrained=False)\n","net.load_state_dict(torch.load(\"TeamB/modelParam/vgg16_bn-6c64b313.pth\"))\n","\n","\n","\"\"\"\n","net=models.resnet18(pretrained=False)\n","net.load_state_dict(torch.load('modelParam/resnet18-f37072fd.pth'))\n","\"\"\""],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"\\nnet=models.resnet18(pretrained=False)\\nnet.load_state_dict(torch.load('modelParam/resnet18-f37072fd.pth'))\\n\""]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"df2nvLjrkhl_","executionInfo":{"status":"ok","timestamp":1627165851233,"user_tz":-540,"elapsed":22,"user":{"displayName":"PY TORCH","photoUrl":"","userId":"01394943343175077582"}},"outputId":"fb5dee0f-74ee-4f09-94fd-74e94d940962"},"source":["print(net)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["VGG(\n","  (features): Sequential(\n","    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (2): ReLU(inplace=True)\n","    (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (5): ReLU(inplace=True)\n","    (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (9): ReLU(inplace=True)\n","    (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (12): ReLU(inplace=True)\n","    (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (16): ReLU(inplace=True)\n","    (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (19): ReLU(inplace=True)\n","    (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (22): ReLU(inplace=True)\n","    (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (26): ReLU(inplace=True)\n","    (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (29): ReLU(inplace=True)\n","    (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (32): ReLU(inplace=True)\n","    (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (36): ReLU(inplace=True)\n","    (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (39): ReLU(inplace=True)\n","    (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (42): ReLU(inplace=True)\n","    (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","  )\n","  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))\n","  (classifier): Sequential(\n","    (0): Linear(in_features=25088, out_features=4096, bias=True)\n","    (1): ReLU(inplace=True)\n","    (2): Dropout(p=0.5, inplace=False)\n","    (3): Linear(in_features=4096, out_features=4096, bias=True)\n","    (4): ReLU(inplace=True)\n","    (5): Dropout(p=0.5, inplace=False)\n","    (6): Linear(in_features=4096, out_features=1000, bias=True)\n","  )\n",")\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VVMmUjafEHiQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627165851274,"user_tz":-540,"elapsed":38,"user":{"displayName":"PY TORCH","photoUrl":"","userId":"01394943343175077582"}},"outputId":"afa44432-3508-4202-d765-2aa2165c7236"},"source":["#モデル追加\n","save_path='weight_fine_tuning_VGG_2Way.pth'\n","net.classifier.add_module(\"7\",nn.Linear(in_features=1000,out_features=2))\n","net.train()\n","#net.add_module(\"last_fc\",nn.Linear(1000,101,bias=False))"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["VGG(\n","  (features): Sequential(\n","    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (2): ReLU(inplace=True)\n","    (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (5): ReLU(inplace=True)\n","    (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (9): ReLU(inplace=True)\n","    (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (12): ReLU(inplace=True)\n","    (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (16): ReLU(inplace=True)\n","    (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (19): ReLU(inplace=True)\n","    (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (22): ReLU(inplace=True)\n","    (23): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    (24): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (25): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (26): ReLU(inplace=True)\n","    (27): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (29): ReLU(inplace=True)\n","    (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (32): ReLU(inplace=True)\n","    (33): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","    (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (35): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (36): ReLU(inplace=True)\n","    (37): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (38): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (39): ReLU(inplace=True)\n","    (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (42): ReLU(inplace=True)\n","    (43): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","  )\n","  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))\n","  (classifier): Sequential(\n","    (0): Linear(in_features=25088, out_features=4096, bias=True)\n","    (1): ReLU(inplace=True)\n","    (2): Dropout(p=0.5, inplace=False)\n","    (3): Linear(in_features=4096, out_features=4096, bias=True)\n","    (4): ReLU(inplace=True)\n","    (5): Dropout(p=0.5, inplace=False)\n","    (6): Linear(in_features=4096, out_features=1000, bias=True)\n","    (7): Linear(in_features=1000, out_features=2, bias=True)\n","  )\n",")"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"je_KlSmblhQV","executionInfo":{"status":"ok","timestamp":1627165851280,"user_tz":-540,"elapsed":5,"user":{"displayName":"PY TORCH","photoUrl":"","userId":"01394943343175077582"}},"outputId":"b578eb49-8ea9-4dba-a8d2-086b99fcc8b3"},"source":["for name,_ in net.named_parameters():\n","  print(name)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["features.0.weight\n","features.0.bias\n","features.1.weight\n","features.1.bias\n","features.3.weight\n","features.3.bias\n","features.4.weight\n","features.4.bias\n","features.7.weight\n","features.7.bias\n","features.8.weight\n","features.8.bias\n","features.10.weight\n","features.10.bias\n","features.11.weight\n","features.11.bias\n","features.14.weight\n","features.14.bias\n","features.15.weight\n","features.15.bias\n","features.17.weight\n","features.17.bias\n","features.18.weight\n","features.18.bias\n","features.20.weight\n","features.20.bias\n","features.21.weight\n","features.21.bias\n","features.24.weight\n","features.24.bias\n","features.25.weight\n","features.25.bias\n","features.27.weight\n","features.27.bias\n","features.28.weight\n","features.28.bias\n","features.30.weight\n","features.30.bias\n","features.31.weight\n","features.31.bias\n","features.34.weight\n","features.34.bias\n","features.35.weight\n","features.35.bias\n","features.37.weight\n","features.37.bias\n","features.38.weight\n","features.38.bias\n","features.40.weight\n","features.40.bias\n","features.41.weight\n","features.41.bias\n","classifier.0.weight\n","classifier.0.bias\n","classifier.3.weight\n","classifier.3.bias\n","classifier.6.weight\n","classifier.6.bias\n","classifier.7.weight\n","classifier.7.bias\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"AXh0R9I4l-lP"},"source":["# 損失関数と最適化手法"]},{"cell_type":"code","metadata":{"id":"myAOCoSYloIJ"},"source":["criterion=nn.CrossEntropyLoss()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LkN-HXFWmnbH","executionInfo":{"status":"ok","timestamp":1627165851351,"user_tz":-540,"elapsed":28,"user":{"displayName":"PY TORCH","photoUrl":"","userId":"01394943343175077582"}},"outputId":"b75a15ae-a867-41a4-946b-528b194ab8e8"},"source":["for i in net.parameters():\n","  print(i.requires_grad)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n","True\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5ryoLHylHMyD","executionInfo":{"status":"ok","timestamp":1627165851359,"user_tz":-540,"elapsed":7,"user":{"displayName":"PY TORCH","photoUrl":"","userId":"01394943343175077582"}},"outputId":"afab5c42-c72e-48e9-d435-293651102084"},"source":["params_to_update_1=[]\n","params_to_update_2=[]\n","params_to_update_3=[]\n","updata_param_names_1=[\"features\"]\n","updata_param_names_2=[\"classifier.0.weight\",\"classifier.0.bias\",\"classifier.3.weight\",\"classifier.3.bias\",\"classifier.6.weight\",\"classifier.6.bias\"]\n","updata_param_names_3=[\"classifier.7.weight\",\"classifier.7.bias\"]\n","for name,param in net.named_parameters():\n","  if updata_param_names_1[0] in name:\n","    param.requires_grad=True\n","    params_to_update_1.append(param)\n","    print(\"params_to_update_１に格納：\",name)\n","  elif name in updata_param_names_2:\n","    param.requires_grad=True\n","    params_to_update_2.append(param)\n","    print(\"param_to_update_2に格納：\",name)\n","  elif name in updata_param_names_3:\n","    param.requires_grad=True\n","    params_to_update_3.append(param)\n","    print(\"param_to_update_3に格納:\",name)\n","  else:\n","    param.requires_grad=False\n","    print(\"勾配計算なし。学習しない雑魚：\",name)\n","  "],"execution_count":null,"outputs":[{"output_type":"stream","text":["params_to_update_１に格納： features.0.weight\n","params_to_update_１に格納： features.0.bias\n","params_to_update_１に格納： features.1.weight\n","params_to_update_１に格納： features.1.bias\n","params_to_update_１に格納： features.3.weight\n","params_to_update_１に格納： features.3.bias\n","params_to_update_１に格納： features.4.weight\n","params_to_update_１に格納： features.4.bias\n","params_to_update_１に格納： features.7.weight\n","params_to_update_１に格納： features.7.bias\n","params_to_update_１に格納： features.8.weight\n","params_to_update_１に格納： features.8.bias\n","params_to_update_１に格納： features.10.weight\n","params_to_update_１に格納： features.10.bias\n","params_to_update_１に格納： features.11.weight\n","params_to_update_１に格納： features.11.bias\n","params_to_update_１に格納： features.14.weight\n","params_to_update_１に格納： features.14.bias\n","params_to_update_１に格納： features.15.weight\n","params_to_update_１に格納： features.15.bias\n","params_to_update_１に格納： features.17.weight\n","params_to_update_１に格納： features.17.bias\n","params_to_update_１に格納： features.18.weight\n","params_to_update_１に格納： features.18.bias\n","params_to_update_１に格納： features.20.weight\n","params_to_update_１に格納： features.20.bias\n","params_to_update_１に格納： features.21.weight\n","params_to_update_１に格納： features.21.bias\n","params_to_update_１に格納： features.24.weight\n","params_to_update_１に格納： features.24.bias\n","params_to_update_１に格納： features.25.weight\n","params_to_update_１に格納： features.25.bias\n","params_to_update_１に格納： features.27.weight\n","params_to_update_１に格納： features.27.bias\n","params_to_update_１に格納： features.28.weight\n","params_to_update_１に格納： features.28.bias\n","params_to_update_１に格納： features.30.weight\n","params_to_update_１に格納： features.30.bias\n","params_to_update_１に格納： features.31.weight\n","params_to_update_１に格納： features.31.bias\n","params_to_update_１に格納： features.34.weight\n","params_to_update_１に格納： features.34.bias\n","params_to_update_１に格納： features.35.weight\n","params_to_update_１に格納： features.35.bias\n","params_to_update_１に格納： features.37.weight\n","params_to_update_１に格納： features.37.bias\n","params_to_update_１に格納： features.38.weight\n","params_to_update_１に格納： features.38.bias\n","params_to_update_１に格納： features.40.weight\n","params_to_update_１に格納： features.40.bias\n","params_to_update_１に格納： features.41.weight\n","params_to_update_１に格納： features.41.bias\n","param_to_update_2に格納： classifier.0.weight\n","param_to_update_2に格納： classifier.0.bias\n","param_to_update_2に格納： classifier.3.weight\n","param_to_update_2に格納： classifier.3.bias\n","param_to_update_2に格納： classifier.6.weight\n","param_to_update_2に格納： classifier.6.bias\n","param_to_update_3に格納: classifier.7.weight\n","param_to_update_3に格納: classifier.7.bias\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"460p3sSCPghY"},"source":["#このようにして配列に挿入した辞書函数使って、モデルパラメータごとにオプティマイザーのパラメーターを設定することができる\n","optimizer=optim.Adam([{'params':params_to_update_1,'lr':1e-4},\n","                      {'params':params_to_update_2,'lr':5e-4},\n","                      {'params':params_to_update_3,'lr':1e-3}])\n","#optimizer=optim.Adam(net.parameters(),lr=0.001)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BchL8SH8mR_J"},"source":["def tarin_model(net,dataloaders_dict,criterion,optimizer,num_epochs):\n","  #初期設定\n","  #GPUが使えるかを確認する\n","  device=torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","  print('使用でヴァイス:',device)\n","  #ネットワークをGPUへ\n","  net=net.to(device)\n","  #ネットワークがある程度固定(epochごとにネットワーク構造や損失関数が変わったりしない)の場合に高速化させる\n","  torch.backends.cudnn.benchmark=True\n","  for epoch in range(num_epochs):\n","    print(\"Epoch {}/{}\".format(epoch+1,num_epochs))\n","    print('__________')\n","    for phase in ['train','test']:\n","      if phase=='train':\n","        net.train()\n","      else:\n","        net.eval()\n","      epoch_loss=0.0\n","      epoch_corrects=0\n","      for inputs,labels in tqdm(data_loaders_dict[phase]):\n","        #入力をGPUへ\n","        inputs=inputs.to(device)\n","        labels=labels.to(device)\n","        #optimizerの初期化\n","        optimizer.zero_grad()\n","        with torch.set_grad_enabled(phase=='train'):\n","          outputs=net(inputs)\n","          #print(\"output\",outputs.shape)\n","          #print(\"labels\",torch.max(labels,1)[1])\n","          loss=criterion(outputs,labels)\n","          _,preds=torch.max(outputs,1)\n","          if phase=='train':\n","            loss.backward()\n","            optimizer.step()\n","          #tensor.item()はTensor内部の数値をPythonの数字で出力.戻り値はintやfloat\n","          epoch_loss+=loss.item()*inputs.size(0)\n","          #Tensor.dataはTensorのコピーを作成する。戻り値もTensor\n","          epoch_corrects+=torch.sum(preds==labels.data)\n","      epoch_loss=epoch_loss/len(data_loaders_dict[phase].dataset)\n","      epoch_acc=epoch_corrects.double()/len(data_loaders_dict[phase].dataset)\n","      net=net.to(\"cpu\")\n","      torch.save(net.state_dict(),save_path)\n","      net=net.to(device)\n","      print('{} Loss: {:4f} Acc: {:4f}'.format(phase,epoch_loss,epoch_acc))\n","      print(\"output\",outputs.shape)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7J8zbbbWmepE"},"source":["data_loaders_dict={\"train\":train_dataLoader,\"test\":test_dataLoader}"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xu85MfTjmvCl","executionInfo":{"status":"ok","timestamp":1627167073923,"user_tz":-540,"elapsed":1222501,"user":{"displayName":"PY TORCH","photoUrl":"","userId":"01394943343175077582"}},"outputId":"4eee68f3-c9e3-4dea-88a5-f5709d32151b"},"source":["num=10\n","tarin_model(net,data_loaders_dict,criterion,optimizer,num_epochs=num)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["使用でヴァイス: cuda\n","Epoch 1/10\n","__________\n"],"name":"stdout"},{"output_type":"stream","text":["\r  0%|                                                                                          | 0/335 [00:00<?, ?it/s]E:\\Anaconda\\envs\\AIProj\\lib\\site-packages\\torch\\nn\\functional.py:718: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at  ..\\c10/core/TensorImpl.h:1156.)\n","  return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode)\n","100%|████████████████████████████████████████████████████████████████████████████████| 335/335 [01:40<00:00,  3.33it/s]\n"],"name":"stderr"},{"output_type":"stream","text":["train Loss: 0.723412 Acc: 0.631547\n","output torch.Size([1, 2])\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████████████████████████████████████████████████████████████████████████████| 86/86 [00:14<00:00,  5.78it/s]\n"],"name":"stderr"},{"output_type":"stream","text":["test Loss: 0.707443 Acc: 0.757576\n","output torch.Size([8, 2])\n","Epoch 2/10\n","__________\n"],"name":"stdout"},{"output_type":"stream","text":["100%|████████████████████████████████████████████████████████████████████████████████| 335/335 [01:38<00:00,  3.41it/s]\n"],"name":"stderr"},{"output_type":"stream","text":["train Loss: 0.441079 Acc: 0.797965\n","output torch.Size([1, 2])\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████████████████████████████████████████████████████████████████████████████| 86/86 [00:14<00:00,  6.01it/s]\n"],"name":"stderr"},{"output_type":"stream","text":["test Loss: 0.418233 Acc: 0.869464\n","output torch.Size([8, 2])\n","Epoch 3/10\n","__________\n"],"name":"stdout"},{"output_type":"stream","text":["100%|████████████████████████████████████████████████████████████████████████████████| 335/335 [01:39<00:00,  3.37it/s]\n"],"name":"stderr"},{"output_type":"stream","text":["train Loss: 0.328090 Acc: 0.857228\n","output torch.Size([1, 2])\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████████████████████████████████████████████████████████████████████████████| 86/86 [00:14<00:00,  5.87it/s]\n"],"name":"stderr"},{"output_type":"stream","text":["test Loss: 0.263217 Acc: 0.896270\n","output torch.Size([8, 2])\n","Epoch 4/10\n","__________\n"],"name":"stdout"},{"output_type":"stream","text":["100%|████████████████████████████████████████████████████████████████████████████████| 335/335 [01:40<00:00,  3.33it/s]\n"],"name":"stderr"},{"output_type":"stream","text":["train Loss: 0.272546 Acc: 0.898533\n","output torch.Size([1, 2])\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████████████████████████████████████████████████████████████████████████████| 86/86 [00:14<00:00,  5.85it/s]\n"],"name":"stderr"},{"output_type":"stream","text":["test Loss: 0.250066 Acc: 0.903263\n","output torch.Size([8, 2])\n","Epoch 5/10\n","__________\n"],"name":"stdout"},{"output_type":"stream","text":["100%|████████████████████████████████████████████████████████████████████████████████| 335/335 [01:36<00:00,  3.48it/s]\n"],"name":"stderr"},{"output_type":"stream","text":["train Loss: 0.230680 Acc: 0.915295\n","output torch.Size([1, 2])\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████████████████████████████████████████████████████████████████████████████| 86/86 [00:14<00:00,  5.91it/s]\n"],"name":"stderr"},{"output_type":"stream","text":["test Loss: 0.224401 Acc: 0.903263\n","output torch.Size([8, 2])\n","Epoch 6/10\n","__________\n"],"name":"stdout"},{"output_type":"stream","text":["100%|████████████████████████████████████████████████████████████████████████████████| 335/335 [01:37<00:00,  3.45it/s]\n"],"name":"stderr"},{"output_type":"stream","text":["train Loss: 0.214610 Acc: 0.917689\n","output torch.Size([1, 2])\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████████████████████████████████████████████████████████████████████████████| 86/86 [00:14<00:00,  5.98it/s]\n"],"name":"stderr"},{"output_type":"stream","text":["test Loss: 0.352465 Acc: 0.807692\n","output torch.Size([8, 2])\n","Epoch 7/10\n","__________\n"],"name":"stdout"},{"output_type":"stream","text":["100%|████████████████████████████████████████████████████████████████████████████████| 335/335 [01:37<00:00,  3.45it/s]\n"],"name":"stderr"},{"output_type":"stream","text":["train Loss: 0.170171 Acc: 0.938342\n","output torch.Size([1, 2])\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████████████████████████████████████████████████████████████████████████████| 86/86 [00:14<00:00,  6.08it/s]\n"],"name":"stderr"},{"output_type":"stream","text":["test Loss: 0.344127 Acc: 0.864802\n","output torch.Size([8, 2])\n","Epoch 8/10\n","__________\n"],"name":"stdout"},{"output_type":"stream","text":["100%|████████████████████████████████████████████████████████████████████████████████| 335/335 [01:35<00:00,  3.51it/s]\n"],"name":"stderr"},{"output_type":"stream","text":["train Loss: 0.179782 Acc: 0.933852\n","output torch.Size([1, 2])\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████████████████████████████████████████████████████████████████████████████| 86/86 [00:14<00:00,  6.11it/s]\n"],"name":"stderr"},{"output_type":"stream","text":["test Loss: 0.171222 Acc: 0.931235\n","output torch.Size([8, 2])\n","Epoch 9/10\n","__________\n"],"name":"stdout"},{"output_type":"stream","text":["100%|████████████████████████████████████████████████████████████████████████████████| 335/335 [01:35<00:00,  3.52it/s]\n"],"name":"stderr"},{"output_type":"stream","text":["train Loss: 0.155196 Acc: 0.945525\n","output torch.Size([1, 2])\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████████████████████████████████████████████████████████████████████████████| 86/86 [00:14<00:00,  6.09it/s]\n"],"name":"stderr"},{"output_type":"stream","text":["test Loss: 0.160446 Acc: 0.942890\n","output torch.Size([8, 2])\n","Epoch 10/10\n","__________\n"],"name":"stdout"},{"output_type":"stream","text":["100%|████████████████████████████████████████████████████████████████████████████████| 335/335 [01:34<00:00,  3.53it/s]\n"],"name":"stderr"},{"output_type":"stream","text":["train Loss: 0.173526 Acc: 0.935349\n","output torch.Size([1, 2])\n"],"name":"stdout"},{"output_type":"stream","text":["100%|██████████████████████████████████████████████████████████████████████████████████| 86/86 [00:14<00:00,  6.08it/s]\n"],"name":"stderr"},{"output_type":"stream","text":["test Loss: 0.149791 Acc: 0.951049\n","output torch.Size([8, 2])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"mPGml4n6nGxs","colab":{"base_uri":"https://localhost:8080/","height":168},"executionInfo":{"status":"error","timestamp":1627167074420,"user_tz":-540,"elapsed":493,"user":{"displayName":"PY TORCH","photoUrl":"","userId":"01394943343175077582"}},"outputId":"b0060df9-9f19-4c27-f342-dca52221fde3"},"source":["dat"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[1;31m---------------------------------------------------------------------------\u001b[0m","\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_13388/1934116796.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mdat\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[1;31mNameError\u001b[0m: name 'dat' is not defined"]}]},{"cell_type":"code","metadata":{"id":"gsLfmJlloN2i"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cOkEukHyXyH1"},"source":[""],"execution_count":null,"outputs":[]}]}